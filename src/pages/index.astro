---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/sections/Hero.astro';
import About from '../components/sections/About.astro';
import Services from '../components/sections/Services.astro';
import Portfolio from '../components/sections/Portfolio.astro';
import AdditionalServices from '../components/sections/AdditionalServices.astro';
import Partners from '../components/sections/Partners.astro';
import Footer from '../components/sections/Footer.astro';
import SectionDivider from '../components/ui/SectionDivider.astro';
import { images } from '../data/content.js';
---

<Layout title="Total Impact">
  <!-- Logo Overlay -->
  <div class="logo-overlay">
    <img src={images.logo} alt="Total Impact" />
  </div>

  <Hero />
  <About />
  <SectionDivider />
  <Services />
  <SectionDivider />
  <Portfolio />
  <AdditionalServices />
  <Partners />
  <Footer />
</Layout>

<style>
  .logo-overlay {
    position: absolute;
    top: 2rem;
    left: 2rem;
    z-index: 1000;
  }

  .logo-overlay img {
    height: 250px;
    width: auto;
  }

  @media (max-width: 768px) {
    .logo-overlay {
      top: 2rem;
      left: 50%;
      transform: translateX(-50%);
      text-align: center;
    }

    .logo-overlay img {
      height: 130px; /* Double the current 65px */
    }
  }
</style>

<script>
  // Enhanced mobile menu toggle
  const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
  const headerNav = document.querySelector('.header-nav');

  mobileMenuBtn?.addEventListener('click', () => {
    if (!headerNav) return;
    const isOpen = (headerNav as HTMLElement).style.display === 'block';
    (headerNav as HTMLElement).style.display = isOpen ? 'none' : 'block';
    mobileMenuBtn.classList.toggle('active');
  });

  // Enhanced header scroll effect
  let lastScrollY = window.scrollY;
  
  window.addEventListener('scroll', () => {
    const header = document.querySelector('.header');
    const currentScrollY = window.scrollY;
    
    if (header) {
      const headerEl = header as HTMLElement;
      if (currentScrollY > 100) {
        headerEl.style.background = 'rgba(0, 0, 0, 0.98)';
        headerEl.style.transform = currentScrollY > lastScrollY && currentScrollY > 200 ? 'translateY(-100%)' : 'translateY(0)';
      } else {
        headerEl.style.background = 'rgba(0, 0, 0, 0.95)';
        headerEl.style.transform = 'translateY(0)';
      }
    }
    
    lastScrollY = currentScrollY;
  });

  // Smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const link = e.currentTarget as Element;
      if (!link) return;
      const href = link.getAttribute('href');
      if (!href) return;
      const target = document.querySelector(href);
      if (target) {
        const headerEl = document.querySelector('.header');
        const headerHeight = (headerEl as HTMLElement)?.offsetHeight || 0;
        const targetPosition = (target as HTMLElement).offsetTop - headerHeight;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      }
    });
  });

  // Intersection Observer for animations
  const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        (entry.target as HTMLElement).style.opacity = '1';
        (entry.target as HTMLElement).style.transform = 'translateY(0)';
      }
    });
  }, observerOptions);

  // Observe elements for animation
  document.querySelectorAll('.service-item, .portfolio-item, .additional-service').forEach(el => {
    const element = el as HTMLElement;
    element.style.opacity = '0';
    element.style.transform = 'translateY(30px)';
    element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
    observer.observe(element);
  });

  // Button click effects with ripple
  document.querySelectorAll('.btn').forEach(btn => {
    btn.addEventListener('click', function(this: HTMLButtonElement, e) {
      const ripple = document.createElement('span');
      const rect = this.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const mouseEvent = e as MouseEvent;
      const x = mouseEvent.clientX - rect.left - size / 2;
      const y = mouseEvent.clientY - rect.top - size / 2;
      
      ripple.style.width = ripple.style.height = size + 'px';
      ripple.style.left = x + 'px';
      ripple.style.top = y + 'px';
      ripple.classList.add('ripple');
      
      this.appendChild(ripple);
      
      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });
</script>
</Layout>